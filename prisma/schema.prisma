// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  secretkey     String          @unique   @default(uuid())
  email         String          @unique
  username      String?
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  linkform      Linkform[]      // Global links
  LinkformTrash LinkformTrash[]
  varified      Boolean         @default(false)

  // New relation for folders
  folders       Folder[]        // Folders owned by the user
}

model Folder {
  id            Int             @id @default(autoincrement())
  name          String          // Folder name
  secretKey     String          @unique @default(uuid()) // Secret key for the folder
  userID        Int
  user          User            @relation(fields: [userID], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Links related to this folder
  links         Linkform[]      // Relation to Linkform model

  @@index([userID])
}

model Linkform {
  secret_Id     String          @id @default(uuid())
  links         String
  title         String
  imgurl        String?
  tobefind      Boolean         @default(false)
  description   String
  createdAt     DateTime        @default(now())
  userID        Int
  user          User            @relation(fields: [userID], references: [id])

  // Global links will not have a folder
  folderID      Int?            // Null for global links, or an ID for links in a folder
  folder         Folder?        @relation(fields: [folderID], references: [id])

  @@index([userID])
}

model LinkformTrash {
  trash_Id    Int      @id @default(autoincrement())
  secret_Id   Int
  links       String 
  title       String?
  imgurl      String?
  description String?
  createdAt   DateTime
  deletedAt   DateTime @default(now())
  userID      Int
  user        User     @relation(fields: [userID], references: [id])

  // Optional restoredAt if you want to restore from trash
  restoredAt DateTime?

  @@index([userID])
}

model Verification {
  id        String    @id @default(uuid())
  email     String
  token     String
  expires   DateTime

  @@unique([email , token])
}
