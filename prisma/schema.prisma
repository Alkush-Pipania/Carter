generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email         String          @unique
  username      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  password      String
  secretkey     String          @unique @default(uuid())
  id            Int             @id @default(autoincrement())
  varified      Boolean         @default(false)
  folders       Folder[]
  linkform      Linkform[]
  LinkformTrash LinkformTrash[]
  trashFolders  TrashFolder[]
}

model Folder {
  id        Int        @id @unique @default(autoincrement())
  name      String
  secretKey String     @unique @default(uuid())
  userID    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userID], references: [id])
  links     Linkform[]

  @@index([userID])
}

model Linkform {
  secret_Id   String   @id @default(uuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  links       String
  imgurl      String?
  tags        String[]
  tobefind    Boolean  @default(false)
  userID      Int
  folderID    Int?
  folder      Folder?  @relation(fields: [folderID], references: [id])
  user        User     @relation(fields: [userID], references: [id])

  @@index([userID])
}

model TrashFolder {
  id         Int             @id @unique @default(autoincrement())
  name       String
  secretKey  String
  userID     Int
  createdAt  DateTime
  deletedAt  DateTime        @default(now())
  restoredAt DateTime?
  links      LinkformTrash[]
  user       User            @relation(fields: [userID], references: [id])

  @@index([userID])
}

model LinkformTrash {
  trash_Id      Int          @id @default(autoincrement())
  secret_Id     String
  links         String
  title         String?
  description   String?
  createdAt     DateTime
  deletedAt     DateTime     @default(now())
  restoredAt    DateTime?
  imgurl        String?
  userID        Int
  trashFolderID Int?
  trashFolder   TrashFolder? @relation(fields: [trashFolderID], references: [id])
  user          User         @relation(fields: [userID], references: [id])

  @@index([userID])
}

model Verification {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model ForgotPassword {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model fallbackImage {
  id     Int    @id @default(autoincrement())
  imgurl String
}
